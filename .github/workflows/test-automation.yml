name: Test Automation CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly regression tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - regression
          - api
          - mobile
          - all
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - test
          - staging
          - production

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  # Setup and validation
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Validate configuration
        run: |
          npm run test:config || echo "Config validation script not found"
          
      - name: Set test matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.test_suite }}" == "all" || "${{ github.event_name }}" == "schedule" ]]; then
            echo 'matrix={"browser":["chromium","firefox","webkit"],"suite":["smoke","regression","api"]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"browser":["chromium"],"suite":["${{ github.event.inputs.test_suite || 'smoke' }}"]}' >> $GITHUB_OUTPUT
          fi

  # Simple API Tests (always run)
  simple-api-tests:
    needs: setup
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Simple API Tests
        env:
          CI: true
          NODE_ENV: ${{ github.event.inputs.environment || 'staging' }}
        run: npm run test:simple:api

      - name: Upload simple API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: simple-api-test-results
          path: |
            output/
            !output/node_modules/
          retention-days: 30

  # BDD Feature Tests
  bdd-tests:
    needs: setup
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run BDD Feature Tests
        env:
          CI: true
          NODE_ENV: ${{ github.event.inputs.environment || 'staging' }}
        run: npx codeceptjs run --config codecept.simple.conf.js features/ecommerce_api.feature --grep "@smoke"

      - name: Upload BDD test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bdd-test-results
          path: |
            output/
            !output/node_modules/
          retention-days: 30

  # Web UI Tests (requires browser setup)
  web-tests:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    if: contains(fromJson(needs.setup.outputs.matrix).suite, 'regression') || github.event.inputs.test_suite == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run Web UI Tests
        env:
          CI: true
          NODE_ENV: ${{ github.event.inputs.environment || 'staging' }}
          BROWSER: ${{ matrix.browser }}
        run: |
          if [[ "${{ matrix.suite }}" == "smoke" ]]; then
            npm run test:web -- --grep "@smoke"
          elif [[ "${{ matrix.suite }}" == "regression" ]]; then
            npm run test:web -- --grep "@regression"
          else
            npm run test:web
          fi
        continue-on-error: true # Web tests may fail without proper setup

      - name: Upload web test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: web-test-results-${{ matrix.browser }}-${{ matrix.suite }}
          path: |
            output/
            !output/node_modules/
          retention-days: 30

  # API Tests (comprehensive)
  api-tests:
    needs: setup
    runs-on: ubuntu-latest
    if: contains(fromJson(needs.setup.outputs.matrix).suite, 'api') || github.event.inputs.test_suite == 'api'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run API Tests
        env:
          CI: true
          NODE_ENV: ${{ github.event.inputs.environment || 'staging' }}
        run: npm run test:api
        continue-on-error: true # Some API tests may fail without proper setup

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            output/
            !output/node_modules/
          retention-days: 30

  # Generate Reports
  generate-reports:
    needs: [simple-api-tests, bdd-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: ./test-results/

      - name: List downloaded artifacts
        run: |
          echo "Downloaded test results:"
          find ./test-results -type f -name "*.json" || echo "No JSON files found"
          find ./test-results -type f || echo "No files found"

      - name: Generate simple report summary
        run: |
          echo "# Test Automation Results" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Execution Summary" >> test-summary.md
          echo "- Date: $(date)" >> test-summary.md
          echo "- Environment: ${{ github.event.inputs.environment || 'staging' }}" >> test-summary.md
          echo "- Trigger: ${{ github.event_name }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Artifacts Generated" >> test-summary.md
          ls -la ./test-results/ >> test-summary.md || echo "No artifacts found" >> test-summary.md

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-execution-summary
          path: test-summary.md
          retention-days: 90

  # Notification
  notify:
    needs: [simple-api-tests, bdd-tests, generate-reports]
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.simple-api-tests.result }}" == "success" && "${{ needs.bdd-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Test Automation Pipeline completed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Test Automation Pipeline had failures. Check the results." >> $GITHUB_OUTPUT
          fi

      - name: Create issue on failure
        if: steps.status.outputs.status == 'failure' && github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Nightly Test Automation Failure',
              body: `${{ steps.status.outputs.message }}\n\nFailed on: ${new Date().toISOString()}\nWorkflow: ${context.workflow}\nRun: ${context.runNumber}`
            })

      - name: Log results
        run: |
          echo "Pipeline Status: ${{ steps.status.outputs.status }}"
          echo "Message: ${{ steps.status.outputs.message }}"