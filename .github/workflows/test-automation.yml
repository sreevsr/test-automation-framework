name: Test Automation CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly regression tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - regression
          - api
          - mobile
          - all
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - test
          - staging
          - production

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  # Setup and validation
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Validate configuration
        run: |
          npm run test:config || echo "Config validation script not found"
          
      - name: Set test matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.test_suite }}" == "all" || "${{ github.event_name }}" == "schedule" ]]; then
            echo 'matrix={"browser":["chromium","firefox","webkit"],"suite":["smoke","regression","api"]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"browser":["chromium"],"suite":["${{ github.event.inputs.test_suite || 'smoke' }}"]}' >> $GITHUB_OUTPUT
          fi

  # Web UI Tests
  web-tests:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run Web UI Tests
        env:
          CI: true
          NODE_ENV: ${{ github.event.inputs.environment || 'staging' }}
          BROWSER: ${{ matrix.browser }}
        run: |
          if [[ "${{ matrix.suite }}" == "smoke" ]]; then
            npm run test:web -- --grep "@smoke"
          elif [[ "${{ matrix.suite }}" == "regression" ]]; then
            npm run test:web -- --grep "@regression"
          else
            npm run test:web
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: web-test-results-${{ matrix.browser }}-${{ matrix.suite }}
          path: |
            output/
            !output/node_modules/
          retention-days: 30

  # API Tests
  api-tests:
    needs: setup
    runs-on: ubuntu-latest
    if: contains(fromJson(needs.setup.outputs.matrix).suite, 'api') || github.event.inputs.test_suite == 'api'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run API Tests
        env:
          CI: true
          NODE_ENV: ${{ github.event.inputs.environment || 'staging' }}
        run: npm run test:api

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            output/
            !output/node_modules/
          retention-days: 30

  # Mobile Web Tests
  mobile-web-tests:
    needs: setup
    runs-on: ubuntu-latest
    if: contains(fromJson(needs.setup.outputs.matrix).suite, 'mobile') || github.event.inputs.test_suite == 'mobile'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run Mobile Web Tests
        env:
          CI: true
          NODE_ENV: ${{ github.event.inputs.environment || 'staging' }}
        run: npm run test:mobile-web

      - name: Upload mobile web test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-web-test-results
          path: |
            output/
            !output/node_modules/
          retention-days: 30

  # Mobile App Tests (Android)
  mobile-app-tests:
    needs: setup
    runs-on: ubuntu-latest
    if: contains(fromJson(needs.setup.outputs.matrix).suite, 'mobile') || github.event.inputs.test_suite == 'mobile'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm ci

      - name: Start Appium server
        run: |
          npm install -g appium
          appium driver install uiautomator2
          appium &
          sleep 10

      - name: Create Android Virtual Device
        run: |
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-30" "system-images;android-30;google_apis;x86_64"
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd --force --name test_emulator --package "system-images;android-30;google_apis;x86_64"

      - name: Launch Android Emulator
        run: |
          $ANDROID_HOME/emulator/emulator -avd test_emulator -no-audio -no-window &
          adb wait-for-device
          adb shell input keyevent 82

      - name: Run Mobile App Tests
        env:
          CI: true
          NODE_ENV: ${{ github.event.inputs.environment || 'staging' }}
          ANDROID_VERSION: '11.0'
          DEVICE_NAME: 'test_emulator'
        run: npm run test:mobile
        continue-on-error: true # Mobile tests can be flaky

      - name: Upload mobile app test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-app-test-results
          path: |
            output/
            !output/node_modules/
          retention-days: 30

  # Performance Tests
  performance-tests:
    needs: setup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_suite == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run Performance Tests
        env:
          CI: true
          NODE_ENV: ${{ github.event.inputs.environment || 'staging' }}
        run: npm run test -- --grep "@performance"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            output/
            !output/node_modules/
          retention-days: 30

  # Generate Reports
  generate-reports:
    needs: [web-tests, api-tests, mobile-web-tests, mobile-app-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: ./test-results/

      - name: Merge test results
        run: |
          mkdir -p output/allure-results
          find ./test-results -name "*.json" -path "*/allure-results/*" -exec cp {} output/allure-results/ \;

      - name: Generate Allure Report
        run: |
          npm run report:generate
          
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./output/allure-reports
          destination_dir: test-reports

      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: output/allure-reports/
          retention-days: 90

  # Slack Notification
  notify:
    needs: [web-tests, api-tests, mobile-web-tests, mobile-app-tests, generate-reports]
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify Slack on Success
        if: ${{ needs.web-tests.result == 'success' && needs.api-tests.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#test-automation'
          text: '✅ Test Automation Pipeline completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: ${{ needs.web-tests.result == 'failure' || needs.api-tests.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#test-automation'
          text: '❌ Test Automation Pipeline failed! Check the reports for details.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}